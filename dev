#!/usr/bin/env ruby

require 'irb'
require 'io/console'

# File: dev.rb

# Get the file to watch from the first argument, default to "hello.rb" if not provided
file = ARGV[0] || "hello.rb"
quiet = ENV['QUIET_MODE'] == 'true'

# Check if the file exists
unless File.exist?(file)
  puts "File not found: #{file}"
  exit 1
end

# Check if the `code` command exists
def code_command_exists?
  system("command -v code > /dev/null 2>&1")
end

# Get the initial modification time of the file
last_mtime = File.mtime(file)

puts "Watching #{file} for changes..." unless quiet
puts 'Press Ctrl+D or type "exit" to exit.' unless quiet

# Open the file in VS Code if `code` command exists
if code_command_exists? && !quiet
  puts "Opening #{file} in VS Code..."
  system("code #{file}")
elsif !code_command_exists? && !quiet
  puts "VS Code not found (code command not available)."
end

# Start a thread to monitor file changes
monitor_thread = Thread.new do
  loop do
    # Sleep for a short period to avoid busy-waiting
    sleep 0.2

    # Get the current modification time of the file
    current_mtime = File.mtime(file)

    # Check if the file has been modified
    if current_mtime != last_mtime
      puts "\nFile changed, restarting #{__FILE__}..." unless quiet

      # Set QUIET_MODE to true and restart the program
      ENV['QUIET_MODE'] = 'true'
      exec($PROGRAM_NAME, *ARGV)
    end
  end
end

# Start an IRB session and load the file initially
puts "Starting IRB session..." unless quiet
begin
  IRB.setup(nil)
  workspace = IRB::WorkSpace.new(binding)
  irb = IRB::Irb.new(workspace)
  IRB.conf[:MAIN_CONTEXT] = irb.context

  # Load the file initially in the IRB binding context
  irb_binding = irb.context.workspace.binding
  begin
    irb_binding.eval(File.read(file))
  rescue Exception => e
    warn "[ERROR] #{e.message})"
  end

  trap("SIGINT") do
    irb.signal_handle
  end

  catch(:IRB_EXIT) do
    irb.eval_input
  end
rescue Interrupt
  puts "\nExiting gracefully. Goodbye!"
  monitor_thread.kill
  exit 0
end
